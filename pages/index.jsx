import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.scss";
import { stringify } from "querystring";

import { SlMagnifier } from "react-icons/sl";
import { BiTrashAlt } from "react-icons/bi";
import {
  AiOutlineExclamationCircle,
  AiOutlineCloudDownload,
} from "react-icons/ai";
import { useEffect, useRef, useState } from "react";
import state from "../state/state";
import { observer } from "mobx-react-lite";

const Home = () => {
  const [selectedFiles, setSelectedFiles] = useState(null);
  const [deleteName, setDeleteName] = useState("");
  const [downloadModal, setDownloadModal] = useState(false);
  const [infoModal, setInfoModal] = useState(false);
  const [deleteModal, setDeleteModal] = useState(false);

  useEffect(() => {
    state.FetchFiles();
  }, []);

  const filePicker = useRef();

  const handlePick = () => {
    filePicker.current.click();
  };
  return (
    <div className={styles.container}>
      <Head>
        <title>ГПЗУ | Главная страница</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className={styles.topBar}>
        <h3>ГПЗУ</h3>
      </header>
      <div className={styles.mainContainer}>
        <h1 className={styles.mainText}>
          Сервис по обработке градостроительных планов земельных участков
        </h1>
        <div className={styles.useContainers}>
          <div className={styles.useContainer}>
            <h4>ОНЛАЙН-СЕРВИС</h4>
            <p>
              Сервис автоматически обрабатывает данные из электронного образа
              ГПЗУ (файл в формате PDF), преобразовывает в структурированный
              (машиночитаемый) формат, хранит и экспортирует в целях дальнейшего
              использования.
            </p>
            <div>
              <button
                onClick={handlePick}
                style={{
                  display: state.sendingFiles ? "flex" : "block",
                  backgroundColor: state.sendingFiles
                    ? "#a1a1a18f"
                    : "var(--topbarcolor)",
                }}
              >
                {state.sendingFiles ? (
                  <>
                    Отправка файлов{" "}
                    <div className={styles.ldsripple}>
                      <div></div>
                      <div></div>
                    </div>
                  </>
                ) : (
                  <>
                    ЗАГРУЗИТЬ ФАЙЛЫ
                    <sup>
                      <small> .PDF</small>
                    </sup>
                  </>
                )}
              </button>
              {/* <button onClick={() => {
                state.handleUpload()
              }}>Отправить файл</button> */}
            </div>
            <input
              onChange={(event) => {
                state.handleChange(event.target.files);
              }}
              accept=".pdf"
              type="file"
              className={styles.hidden}
              ref={filePicker}
              multiple
            />
          </div>
          <div
            className={
              state.fileList.length > 0 ? styles.list : styles.emptyList
            }
          >
            {state.fileList.length > 0 ? (
              <>
                <input
                  type="text"
                  placeholder="Поиск по файлам"
                  className={styles.listInput}
                />
                <SlMagnifier className={styles.listSVG} />
                <ul className={styles.listUl}>
                  <li className={styles.listUlLiFirst + " " + styles.listUlLi}>
                    <h2>Имя файла</h2>
                    <h2>Дата</h2>
                  </li>
                  {state.fileList.length > 0
                    ? state.fileList.map((file) => {
                        let date = new Date(file.dateOfIssue);
                        return (
                          <li key={file.uplpDocId} className={styles.listUlLi}>
                            <h2 className={styles.listUlLiId}>
                              {file.uplpDocId}
                            </h2>
                            <h2 className={styles.listUlLiName}>
                              {file.fileName}
                            </h2>
                            <h2 className={styles.listUlLiDate}>
                              {date.getDay().length > 1
                                ? date.getDay()
                                : "0" + date.getDay()}
                              .
                              {(date.getMonth() + 1).length > 1
                                ? date.getMonth() + 1
                                : "0" + (date.getMonth() + 1)}
                              .{date.getFullYear()}
                            </h2>
                            <div className={styles.listUlButtons}>
                              <AiOutlineCloudDownload
                                onClick={() => {
                                  state.setFileId(file.uplpDocId);
                                  setDeleteName(file.fileName);
                                  setDownloadModal(true);
                                }}
                              />
                              <AiOutlineExclamationCircle
                                onClick={async () => {
                                  state.setFileId(file.uplpDocId);
                                  await state.getLogInfoFile();
                                  setInfoModal(true);
                                }}
                              />
                              <BiTrashAlt
                                onClick={() => {
                                  state.setFileId(file.uplpDocId);
                                  setDeleteName(file.fileName);
                                  setDeleteModal(true);
                                }}
                              />
                            </div>
                          </li>
                        );
                      })
                    : null}
                </ul>
              </>
            ) : (
              <h1>Файлы отсутствуют</h1>
            )}
          </div>
        </div>
      </div>
      <div
        className={styles.blackBg}
        style={{
          display: downloadModal || infoModal || deleteModal ? "block" : "none",
        }}
        onClick={() => {
          setDeleteModal(false);
          setDownloadModal(false);
          setInfoModal(false);
        }}
      ></div>
      <div
        className={styles.modal}
        style={{
          display: downloadModal ? "flex" : "none",
        }}
      >
        <h1>Файл: {deleteName}</h1>
        <p>
          <b>Выберите формат файла</b>
        </p>
        <div className={styles.downloadButtons}>
          <button
            onClick={() => {
              state.downloadFile("XML");
              setDownloadModal(false);
            }}
          >
            .XML
          </button>
          <button
            onClick={() => {
              state.downloadFile("XLSX");
              setDownloadModal(false);
            }}
          >
            .XLSX
          </button>
          <button
            onClick={() => {
              state.downloadFile("JSON");
              setDownloadModal(false);
            }}
          >
            .JSON
          </button>
          <button
            onClick={() => {
              state.downloadFile("CSV");
              setDownloadModal(false);
            }}
          >
            .CSV
          </button>
        </div>
      </div>
      <div
        className={styles.modal}
        style={{ display: infoModal ? "flex" : "none" }}
      >
        <h1>Информация о файле</h1>
        <p>ID: {state.logInfo.uplpLogId}</p>
        <p>Имя файла: {state.logInfo.fileName}</p>
        <p>Результат: {state.logInfo.processResult}</p>
        <p>Ошибки: {state.logInfo.errors}</p>
        <p>Информация временно не доступна :(</p>
      </div>
      <div
        className={styles.modal}
        style={{ display: deleteModal ? "flex" : "none" }}
      >
        <h1>Вы действительно хотите удалить файл?</h1>
        <p className={styles.bolderParagraph}>
          <b>Файл: {deleteName}</b>
        </p>
        <div className={styles.downloadButtons}>
          <button
            onClick={async () => {
              await state.deleteFile();
              setDeleteModal(false);
            }}
          >
            Да
          </button>
          <button
            onClick={() => {
              setDeleteModal(false);
            }}
          >
            Нет
          </button>
        </div>
      </div>
    </div>
  );
};

export default observer(Home);
